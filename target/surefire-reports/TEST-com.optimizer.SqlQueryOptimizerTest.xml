<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.optimizer.SqlQueryOptimizerTest" time="0.833" tests="44" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="24"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/mt/optimizer/target/test-classes:/Users/mt/optimizer/target/classes:/Users/mt/.m2/repository/org/apache/calcite/calcite-core/1.35.0/calcite-core-1.35.0.jar:/Users/mt/.m2/repository/org/locationtech/jts/jts-core/1.19.0/jts-core-1.19.0.jar:/Users/mt/.m2/repository/org/locationtech/jts/io/jts-io-common/1.19.0/jts-io-common-1.19.0.jar:/Users/mt/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/Users/mt/.m2/repository/org/locationtech/proj4j/proj4j/1.2.2/proj4j-1.2.2.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.0/jackson-annotations-2.15.0.jar:/Users/mt/.m2/repository/com/google/errorprone/error_prone_annotations/2.5.1/error_prone_annotations-2.5.1.jar:/Users/mt/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/mt/.m2/repository/org/apache/calcite/avatica/avatica-core/1.23.0/avatica-core-1.23.0.jar:/Users/mt/.m2/repository/org/apache/calcite/avatica/avatica-metrics/1.23.0/avatica-metrics-1.23.0.jar:/Users/mt/.m2/repository/com/google/protobuf/protobuf-java/3.21.9/protobuf-java-3.21.9.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/client5/httpclient5/5.1.3/httpclient5-5.1.3.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/core5/httpcore5-h2/5.1.3/httpcore5-h2-5.1.3.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/core5/httpcore5/5.1.3/httpcore5-5.1.3.jar:/Users/mt/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mt/.m2/repository/org/checkerframework/checker-qual/3.10.0/checker-qual-3.10.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.0/jackson-core-2.15.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.0/jackson-dataformat-yaml-2.15.0.jar:/Users/mt/.m2/repository/org/yaml/snakeyaml/2.0/snakeyaml-2.0.jar:/Users/mt/.m2/repository/com/google/uzaygezen/uzaygezen-core/0.2/uzaygezen-core-0.2.jar:/Users/mt/.m2/repository/com/jayway/jsonpath/json-path/2.7.0/json-path-2.7.0.jar:/Users/mt/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar:/Users/mt/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar:/Users/mt/.m2/repository/org/ow2/asm/asm/9.1/asm-9.1.jar:/Users/mt/.m2/repository/com/yahoo/datasketches/sketches-core/0.9.0/sketches-core-0.9.0.jar:/Users/mt/.m2/repository/com/yahoo/datasketches/memory/0.9.0/memory-0.9.0.jar:/Users/mt/.m2/repository/commons-codec/commons-codec/1.13/commons-codec-1.13.jar:/Users/mt/.m2/repository/net/hydromatic/aggdesigner-algorithm/6.0/aggdesigner-algorithm-6.0.jar:/Users/mt/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/Users/mt/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:/Users/mt/.m2/repository/org/apache/commons/commons-dbcp2/2.6.0/commons-dbcp2-2.6.0.jar:/Users/mt/.m2/repository/org/apache/commons/commons-pool2/2.6.1/commons-pool2-2.6.1.jar:/Users/mt/.m2/repository/org/apache/commons/commons-lang3/3.8/commons-lang3-3.8.jar:/Users/mt/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/mt/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/mt/.m2/repository/org/codehaus/janino/commons-compiler/3.1.9/commons-compiler-3.1.9.jar:/Users/mt/.m2/repository/org/codehaus/janino/janino/3.1.9/janino-3.1.9.jar:/Users/mt/.m2/repository/org/apache/calcite/calcite-linq4j/1.35.0/calcite-linq4j-1.35.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/Users/mt/.m2/repository/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar:/Users/mt/.m2/repository/org/slf4j/slf4j-simple/2.0.7/slf4j-simple-2.0.7.jar:/Users/mt/.m2/repository/commons-cli/commons-cli/1.5.0/commons-cli-1.5.0.jar:/Users/mt/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/mt/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:"/>
    <property name="java.vm.vendor" value="Homebrew"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="24"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk/24.0.2/libexec/openjdk.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/mt/optimizer/target/surefire/surefirebooter-20250826140354337_3.jar /Users/mt/optimizer/target/surefire 2025-08-26T14-03-54_291-jvmRun1 surefire-20250826140354337_1tmp surefire_0-20250826140354337_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="test" value="SqlQueryOptimizerTest"/>
    <property name="surefire.test.class.path" value="/Users/mt/optimizer/target/test-classes:/Users/mt/optimizer/target/classes:/Users/mt/.m2/repository/org/apache/calcite/calcite-core/1.35.0/calcite-core-1.35.0.jar:/Users/mt/.m2/repository/org/locationtech/jts/jts-core/1.19.0/jts-core-1.19.0.jar:/Users/mt/.m2/repository/org/locationtech/jts/io/jts-io-common/1.19.0/jts-io-common-1.19.0.jar:/Users/mt/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/Users/mt/.m2/repository/org/locationtech/proj4j/proj4j/1.2.2/proj4j-1.2.2.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.0/jackson-annotations-2.15.0.jar:/Users/mt/.m2/repository/com/google/errorprone/error_prone_annotations/2.5.1/error_prone_annotations-2.5.1.jar:/Users/mt/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/mt/.m2/repository/org/apache/calcite/avatica/avatica-core/1.23.0/avatica-core-1.23.0.jar:/Users/mt/.m2/repository/org/apache/calcite/avatica/avatica-metrics/1.23.0/avatica-metrics-1.23.0.jar:/Users/mt/.m2/repository/com/google/protobuf/protobuf-java/3.21.9/protobuf-java-3.21.9.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/client5/httpclient5/5.1.3/httpclient5-5.1.3.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/core5/httpcore5-h2/5.1.3/httpcore5-h2-5.1.3.jar:/Users/mt/.m2/repository/org/apache/httpcomponents/core5/httpcore5/5.1.3/httpcore5-5.1.3.jar:/Users/mt/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mt/.m2/repository/org/checkerframework/checker-qual/3.10.0/checker-qual-3.10.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.0/jackson-core-2.15.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.0/jackson-dataformat-yaml-2.15.0.jar:/Users/mt/.m2/repository/org/yaml/snakeyaml/2.0/snakeyaml-2.0.jar:/Users/mt/.m2/repository/com/google/uzaygezen/uzaygezen-core/0.2/uzaygezen-core-0.2.jar:/Users/mt/.m2/repository/com/jayway/jsonpath/json-path/2.7.0/json-path-2.7.0.jar:/Users/mt/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar:/Users/mt/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar:/Users/mt/.m2/repository/org/ow2/asm/asm/9.1/asm-9.1.jar:/Users/mt/.m2/repository/com/yahoo/datasketches/sketches-core/0.9.0/sketches-core-0.9.0.jar:/Users/mt/.m2/repository/com/yahoo/datasketches/memory/0.9.0/memory-0.9.0.jar:/Users/mt/.m2/repository/commons-codec/commons-codec/1.13/commons-codec-1.13.jar:/Users/mt/.m2/repository/net/hydromatic/aggdesigner-algorithm/6.0/aggdesigner-algorithm-6.0.jar:/Users/mt/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/Users/mt/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:/Users/mt/.m2/repository/org/apache/commons/commons-dbcp2/2.6.0/commons-dbcp2-2.6.0.jar:/Users/mt/.m2/repository/org/apache/commons/commons-pool2/2.6.1/commons-pool2-2.6.1.jar:/Users/mt/.m2/repository/org/apache/commons/commons-lang3/3.8/commons-lang3-3.8.jar:/Users/mt/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/mt/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/mt/.m2/repository/org/codehaus/janino/commons-compiler/3.1.9/commons-compiler-3.1.9.jar:/Users/mt/.m2/repository/org/codehaus/janino/janino/3.1.9/janino-3.1.9.jar:/Users/mt/.m2/repository/org/apache/calcite/calcite-linq4j/1.35.0/calcite-linq4j-1.35.0.jar:/Users/mt/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/Users/mt/.m2/repository/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar:/Users/mt/.m2/repository/org/slf4j/slf4j-simple/2.0.7/slf4j-simple-2.0.7.jar:/Users/mt/.m2/repository/commons-cli/commons-cli/1.5.0/commons-cli-1.5.0.jar:/Users/mt/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/mt/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/mt"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="/opt/homebrew/Cellar/openjdk/24.0.2/libexec/openjdk.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/mt/optimizer"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/mt/optimizer/target/surefire/surefirebooter-20250826140354337_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="24.0.2"/>
    <property name="user.name" value="mt"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.6"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Homebrew"/>
    <property name="localRepository" value="/Users/mt/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/wr/00x6_d090j31mhk_rcnh7wp00000gn/T/"/>
    <property name="java.version" value="24.0.2"/>
    <property name="user.dir" value="/Users/mt/optimizer"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/mt/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Homebrew"/>
    <property name="java.vm.version" value="24.0.2"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="68.0"/>
  </properties>
  <testcase name="testWhereWithIn" classname="com.optimizer.SqlQueryOptimizerTest" time="0.679">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE department_id IN (1, 2, 3)
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testWhereWithOr" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE salary > 50000 OR department_id = 1
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testMultipleWhereConditions" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE salary > 50000 AND department_id = 1
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSimpleAggregation" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT COUNT(*) FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testLeftJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name FROM employees e LEFT JOIN departments d ON e.department_id = d.id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testWhereCondition" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE salary > 50000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testGroupByWithJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.004">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT d.name, COUNT(*), AVG(e.salary) FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testOrderBy" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees ORDER BY salary DESC
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSubqueryInWhere" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE department_id IN (SELECT id FROM departments WHERE budget > 1000000)
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testCaseExpression" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT name, CASE   WHEN salary > 70000 THEN 'High'   WHEN salary > 50000 THEN 'Medium'   ELSE 'Low' END as salary_level FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testQuerySplittingWithHighThreshold" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, o.amount FROM employees e JOIN departments d ON e.department_id = d.id LEFT JOIN orders o ON e.id = o.employee_id WHERE e.salary > 50000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testLimit" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees LIMIT 10
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testUnion" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT name FROM employees WHERE department_id = 1 UNION SELECT name FROM employees WHERE department_id = 2
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testStringFunctions" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT UPPER(name), LOWER(name), LENGTH(name), SUBSTRING(name, 1, 3) FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSubqueryInFrom" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM (SELECT department_id, AVG(salary) as avg_salary FROM employees GROUP BY department_id) dept_stats
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testRightJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name FROM employees e RIGHT JOIN departments d ON e.department_id = d.id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testMultiTableJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, c.name, o.amount FROM employees e JOIN departments d ON e.department_id = d.id JOIN orders o ON e.id = o.employee_id JOIN customers c ON o.customer_id = c.id WHERE o.amount > 1000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testDateFunctions" classname="com.optimizer.SqlQueryOptimizerTest" time="0.014">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT YEAR(hire_date), MONTH(hire_date), EXTRACT(DAY FROM hire_date) FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testOrderByWithJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, e.salary FROM employees e JOIN departments d ON e.department_id = d.id ORDER BY e.salary DESC
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testComplexJoinWithWhere" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, o.amount FROM employees e JOIN departments d ON e.department_id = d.id LEFT JOIN orders o ON e.id = o.employee_id WHERE e.salary > 50000 AND o.amount > 1000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testHavingWithJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT d.name, COUNT(*), AVG(e.salary) FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name HAVING AVG(e.salary) > 50000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSimpleSelect" classname="com.optimizer.SqlQueryOptimizerTest" time="0.007">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSubqueryInSelect" classname="com.optimizer.SqlQueryOptimizerTest" time="0.001">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, (SELECT COUNT(*) FROM orders o WHERE o.employee_id = e.id) as order_count FROM employees e
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testGroupBy" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT department_id, COUNT(*), AVG(salary) FROM employees GROUP BY department_id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testWhereWithBetween" classname="com.optimizer.SqlQueryOptimizerTest" time="0.004">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE salary BETWEEN 30000 AND 70000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testInnerJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name FROM employees e JOIN departments d ON e.department_id = d.id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSelectWithAlias" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.id, e.name as employee_name FROM employees e
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testMultipleAggregations" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT COUNT(*), AVG(salary), MAX(salary), MIN(salary), SUM(salary) FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testUnionAll" classname="com.optimizer.SqlQueryOptimizerTest" time="0.001">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT name FROM employees WHERE department_id = 1 UNION ALL SELECT name FROM employees WHERE department_id = 2
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testLimitOffset" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees LIMIT 10 OFFSET 20
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testComplexQuery" classname="com.optimizer.SqlQueryOptimizerTest" time="0.003">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT d.name, COUNT(e.id) as emp_count, AVG(e.salary) as avg_salary FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary > 30000 GROUP BY d.name HAVING COUNT(e.id) > 5 ORDER BY avg_salary DESC LIMIT 5
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testSelectWithColumns" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT id, name, salary FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testOrderByMultiple" classname="com.optimizer.SqlQueryOptimizerTest" time="0.001">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees ORDER BY department_id ASC, salary DESC
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testWhereWithLike" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE name LIKE '%John%'
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testWhereWithNull" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE manager_id IS NULL
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testMultipleJoins" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, o.amount FROM employees e JOIN departments d ON e.department_id = d.id LEFT JOIN orders o ON e.id = o.employee_id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testQuerySplittingWithLowThreshold" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name, o.amount FROM employees e JOIN departments d ON e.department_id = d.id LEFT JOIN orders o ON e.id = o.employee_id WHERE e.salary > 50000
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testHaving" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT department_id, COUNT(*), AVG(salary) FROM employees GROUP BY department_id HAVING COUNT(*) > 10
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testNestedAggregations" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT d.name, COUNT(e.id) as emp_count, AVG(e.salary) as avg_salary, (SELECT MAX(salary) FROM employees) as max_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testOffset" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees OFFSET 10
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testInvalidSql" classname="com.optimizer.SqlQueryOptimizerTest" time="0.002">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM nonexistent_table
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testMalformedSql" classname="com.optimizer.SqlQueryOptimizerTest" time="0.011">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT * FROM employees WHERE
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] ERROR com.optimizer.core.QueryOptimizer - Ошибка оптимизации запроса
org.apache.calcite.sql.parser.SqlParseException: Encountered "<EOF>" at line 1, column 29.
Was expecting one of:
    "CURSOR" ...
    "EXISTS" ...
    "NOT" ...
    "ROW" ...
    "UNIQUE" ...
    "(" ...
    "+" ...
    "-" ...
    "INTERVAL" ...
    <UNSIGNED_INTEGER_LITERAL> ...
    <DECIMAL_NUMERIC_LITERAL> ...
    <APPROX_NUMERIC_LITERAL> ...
    <BINARY_STRING_LITERAL> ...
    <PREFIXED_STRING_LITERAL> ...
    <QUOTED_STRING> ...
    <UNICODE_STRING_LITERAL> ...
    <C_STYLE_ESCAPED_STRING_LITERAL> ...
    <BIG_QUERY_DOUBLE_QUOTED_STRING> ...
    <BIG_QUERY_QUOTED_STRING> ...
    "TRUE" ...
    "FALSE" ...
    "UNKNOWN" ...
    "NULL" ...
    <LBRACE_D> ...
    <LBRACE_T> ...
    <LBRACE_TS> ...
    "DATE" ...
    "DATETIME" ...
    "TIME" ...
    "TIMESTAMP" ...
    "?" ...
    "CAST" ...
    "SAFE_CAST" ...
    "TRY_CAST" ...
    "EXTRACT" ...
    "POSITION" ...
    "CONVERT" ...
    "TRANSLATE" ...
    "OVERLAY" ...
    "FLOOR" ...
    "CEIL" ...
    "CEILING" ...
    "SUBSTRING" ...
    "TRIM" ...
    "CLASSIFIER" ...
    "MATCH_NUMBER" ...
    "RUNNING" ...
    "PREV" ...
    "NEXT" ...
    "JSON_EXISTS" ...
    "JSON_VALUE" ...
    "JSON_QUERY" ...
    "JSON_OBJECT" ...
    "JSON_OBJECTAGG" ...
    "JSON_ARRAY" ...
    "JSON_ARRAYAGG" ...
    <LBRACE_FN> ...
    "MULTISET" ...
    "ARRAY" ...
    "PERIOD" ...
    "SPECIFIC" ...
    <IDENTIFIER> ...
    <HYPHENATED_IDENTIFIER> ...
    <QUOTED_IDENTIFIER> ...
    <BACK_QUOTED_IDENTIFIER> ...
    <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
    <BRACKET_QUOTED_IDENTIFIER> ...
    <UNICODE_QUOTED_IDENTIFIER> ...
    "ABS" ...
    "AVG" ...
    "CARDINALITY" ...
    "CHAR" ...
    "CHAR_LENGTH" ...
    "CHARACTER_LENGTH" ...
    "COALESCE" ...
    "COLLECT" ...
    "COVAR_POP" ...
    "COVAR_SAMP" ...
    "CUME_DIST" ...
    "COUNT" ...
    "CURRENT_DATE" ...
    "CURRENT_TIME" ...
    "CURRENT_TIMESTAMP" ...
    "DENSE_RANK" ...
    "ELEMENT" ...
    "EVERY" ...
    "EXP" ...
    "FIRST_VALUE" ...
    "FUSION" ...
    "INTERSECTION" ...
    "GROUPING" ...
    "HOUR" ...
    "LAG" ...
    "LEAD" ...
    "LEFT" ...
    "LAST_VALUE" ...
    "LN" ...
    "LOCALTIME" ...
    "LOCALTIMESTAMP" ...
    "LOWER" ...
    "MAX" ...
    "MIN" ...
    "MINUTE" ...
    "MOD" ...
    "MONTH" ...
    "NTH_VALUE" ...
    "NTILE" ...
    "NULLIF" ...
    "OCTET_LENGTH" ...
    "PERCENT_RANK" ...
    "POWER" ...
    "RANK" ...
    "REGR_COUNT" ...
    "REGR_SXX" ...
    "REGR_SYY" ...
    "RIGHT" ...
    "ROW_NUMBER" ...
    "SECOND" ...
    "SOME" ...
    "SQRT" ...
    "STDDEV_POP" ...
    "STDDEV_SAMP" ...
    "SUM" ...
    "UPPER" ...
    "TRUNCATE" ...
    "USER" ...
    "VAR_POP" ...
    "VAR_SAMP" ...
    "YEAR" ...
    "CURRENT_CATALOG" ...
    "CURRENT_DEFAULT_TRANSFORM_GROUP" ...
    "CURRENT_PATH" ...
    "CURRENT_ROLE" ...
    "CURRENT_SCHEMA" ...
    "CURRENT_USER" ...
    "SESSION_USER" ...
    "SYSTEM_USER" ...
    "NEW" ...
    "CASE" ...
    "CURRENT" ...
    
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.convertException(SqlParserImpl.java:410)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.normalizeException(SqlParserImpl.java:156)
	at org.apache.calcite.sql.parser.SqlParser.handleException(SqlParser.java:159)
	at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:174)
	at com.optimizer.core.QueryOptimizer.parseSql(QueryOptimizer.java:118)
	at com.optimizer.core.QueryOptimizer.optimize(QueryOptimizer.java:64)
	at com.optimizer.SqlQueryOptimizerTest.testMalformedSql(SqlQueryOptimizerTest.java:772)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:316)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:240)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:214)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.apache.calcite.sql.parser.impl.ParseException: Encountered "<EOF>" at line 1, column 29.
Was expecting one of:
    "CURSOR" ...
    "EXISTS" ...
    "NOT" ...
    "ROW" ...
    "UNIQUE" ...
    "(" ...
    "+" ...
    "-" ...
    "INTERVAL" ...
    <UNSIGNED_INTEGER_LITERAL> ...
    <DECIMAL_NUMERIC_LITERAL> ...
    <APPROX_NUMERIC_LITERAL> ...
    <BINARY_STRING_LITERAL> ...
    <PREFIXED_STRING_LITERAL> ...
    <QUOTED_STRING> ...
    <UNICODE_STRING_LITERAL> ...
    <C_STYLE_ESCAPED_STRING_LITERAL> ...
    <BIG_QUERY_DOUBLE_QUOTED_STRING> ...
    <BIG_QUERY_QUOTED_STRING> ...
    "TRUE" ...
    "FALSE" ...
    "UNKNOWN" ...
    "NULL" ...
    <LBRACE_D> ...
    <LBRACE_T> ...
    <LBRACE_TS> ...
    "DATE" ...
    "DATETIME" ...
    "TIME" ...
    "TIMESTAMP" ...
    "?" ...
    "CAST" ...
    "SAFE_CAST" ...
    "TRY_CAST" ...
    "EXTRACT" ...
    "POSITION" ...
    "CONVERT" ...
    "TRANSLATE" ...
    "OVERLAY" ...
    "FLOOR" ...
    "CEIL" ...
    "CEILING" ...
    "SUBSTRING" ...
    "TRIM" ...
    "CLASSIFIER" ...
    "MATCH_NUMBER" ...
    "RUNNING" ...
    "PREV" ...
    "NEXT" ...
    "JSON_EXISTS" ...
    "JSON_VALUE" ...
    "JSON_QUERY" ...
    "JSON_OBJECT" ...
    "JSON_OBJECTAGG" ...
    "JSON_ARRAY" ...
    "JSON_ARRAYAGG" ...
    <LBRACE_FN> ...
    "MULTISET" ...
    "ARRAY" ...
    "PERIOD" ...
    "SPECIFIC" ...
    <IDENTIFIER> ...
    <HYPHENATED_IDENTIFIER> ...
    <QUOTED_IDENTIFIER> ...
    <BACK_QUOTED_IDENTIFIER> ...
    <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
    <BRACKET_QUOTED_IDENTIFIER> ...
    <UNICODE_QUOTED_IDENTIFIER> ...
    "ABS" ...
    "AVG" ...
    "CARDINALITY" ...
    "CHAR" ...
    "CHAR_LENGTH" ...
    "CHARACTER_LENGTH" ...
    "COALESCE" ...
    "COLLECT" ...
    "COVAR_POP" ...
    "COVAR_SAMP" ...
    "CUME_DIST" ...
    "COUNT" ...
    "CURRENT_DATE" ...
    "CURRENT_TIME" ...
    "CURRENT_TIMESTAMP" ...
    "DENSE_RANK" ...
    "ELEMENT" ...
    "EVERY" ...
    "EXP" ...
    "FIRST_VALUE" ...
    "FUSION" ...
    "INTERSECTION" ...
    "GROUPING" ...
    "HOUR" ...
    "LAG" ...
    "LEAD" ...
    "LEFT" ...
    "LAST_VALUE" ...
    "LN" ...
    "LOCALTIME" ...
    "LOCALTIMESTAMP" ...
    "LOWER" ...
    "MAX" ...
    "MIN" ...
    "MINUTE" ...
    "MOD" ...
    "MONTH" ...
    "NTH_VALUE" ...
    "NTILE" ...
    "NULLIF" ...
    "OCTET_LENGTH" ...
    "PERCENT_RANK" ...
    "POWER" ...
    "RANK" ...
    "REGR_COUNT" ...
    "REGR_SXX" ...
    "REGR_SYY" ...
    "RIGHT" ...
    "ROW_NUMBER" ...
    "SECOND" ...
    "SOME" ...
    "SQRT" ...
    "STDDEV_POP" ...
    "STDDEV_SAMP" ...
    "SUM" ...
    "UPPER" ...
    "TRUNCATE" ...
    "USER" ...
    "VAR_POP" ...
    "VAR_SAMP" ...
    "YEAR" ...
    "CURRENT_CATALOG" ...
    "CURRENT_DEFAULT_TRANSFORM_GROUP" ...
    "CURRENT_PATH" ...
    "CURRENT_ROLE" ...
    "CURRENT_SCHEMA" ...
    "CURRENT_USER" ...
    "SESSION_USER" ...
    "SYSTEM_USER" ...
    "NEW" ...
    "CASE" ...
    "CURRENT" ...
    
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.generateParseException(SqlParserImpl.java:41363)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.jj_consume_token(SqlParserImpl.java:41174)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.Expression3(SqlParserImpl.java:17527)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.AddExpression2b(SqlParserImpl.java:17084)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.Expression2(SqlParserImpl.java:17126)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.Expression(SqlParserImpl.java:17057)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.Where(SqlParserImpl.java:11959)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlSelect(SqlParserImpl.java:4685)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQuery(SqlParserImpl.java:773)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQueryOrExpr(SqlParserImpl.java:16555)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.QueryOrExpr(SqlParserImpl.java:16399)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.OrderedQueryOrExpr(SqlParserImpl.java:580)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmt(SqlParserImpl.java:4048)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmtEof(SqlParserImpl.java:4086)
	at org.apache.calcite.sql.parser.impl.SqlParserImpl.parseSqlStmtEof(SqlParserImpl.java:204)
	at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:172)
	... 30 more
]]></system-err>
  </testcase>
  <testcase name="testNumericFunctions" classname="com.optimizer.SqlQueryOptimizerTest" time="0.001">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT ABS(salary), ROUND(salary, 2), CEIL(salary), FLOOR(salary) FROM employees
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
  <testcase name="testFullJoin" classname="com.optimizer.SqlQueryOptimizerTest" time="0.001">
    <system-err><![CDATA[[main] INFO com.optimizer.core.QueryOptimizer - Начинаем оптимизацию запроса: SELECT e.name, d.name FROM employees e FULL JOIN departments d ON e.department_id = d.id
[main] INFO com.optimizer.parser.MetadataParser - Схема создана успешно
[main] INFO com.optimizer.parser.StatisticsParser - Статистика загружена успешно
[main] INFO com.optimizer.core.QueryOptimizer - Используем упрощенную оптимизацию
[main] INFO com.optimizer.splitter.QuerySplitter - Создаем упрощенный подзапрос
[main] INFO com.optimizer.splitter.QuerySplitter - Создан 1 подзапрос
[main] INFO com.optimizer.core.QueryOptimizer - Оптимизация завершена. Создано 1 подзапросов
]]></system-err>
  </testcase>
</testsuite>